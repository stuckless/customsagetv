<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="dist-plugin" name="MovieMetadataUpdater" xmlns:ivy="antlib:org.apache.ivy.ant">
	<property environment="env" />

	<!-- Put Host specific properties here, ie sage path, bmt path, etc -->
	<property file="${user.home}/AntCommon/build.properties" />

	<!-- Put Host specific properties here, ie sage path, bmt path, etc -->
	<property file="build.properties" />

	<property name="src.dir" location="src" />
	<property name="target.dir" location="target" />
	<property name="build.dir" location="${target.dir}/build" />
	<property name="dist.dir" location="${target.dir}/dist" />
	<property name="libs" value="lib" />

	<property name="name" value="metadata-updater" />
	<property name="version" value="4.9.4" />

	<property name="launcher" value="MetadataTool" />
	<property name="mainClass" value="org.jdna.metadataupdater.MetadataUpdater" />

	<path id="project.class.path">
		<pathelement location="${build.dir}/classes" />
		<fileset dir="${libs}" includes="*.jar" />
	</path>

	<!-- BEGIN IVY DEPENDENDCY MANAGER -->
	<property name="ivy.install.version" value="2.0.0-beta1" />
	<condition property="ivy.home" value="${env.IVY_HOME}">
		<isset property="env.IVY_HOME" />
	</condition>
	<property name="ivy.home" value="${user.home}/.ant" />
	<property name="ivy.jar.dir" value="${ivy.home}/lib" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

	<target name="download-ivy" unless="offline">
		<mkdir dir="${ivy.jar.dir}" />
		<!-- download Ivy from web site so that it can be used even without any special installation -->
		<get src="http://www.apache.org/dist/ant/ivy/${ivy.install.version}/ivy.jar" dest="${ivy.jar.file}" usetimestamp="true" />
	</target>

	<target name="init-ivy" depends="download-ivy">
		<!-- try to load ivy here from ivy home, in case the user has not already dropped
              it into ant's lib dir (note that the latter copy will always take precedence).
              We will not fail as long as local lib dir exists (it may be empty) and
              ivy is in at least one of ant's lib dir or the local lib dir. -->
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
	</target>

	<target name="resolve" description="retrieve dependencies with ivy">
		<ivy:retrieve />
	</target>

	<!-- END IVY DEPENDENDCY MANAGER -->

	<target name="init" depends="clean,init-ivy,resolve">
		<mkdir dir="${target.dir}" />
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dir}/sage" />
		<mkdir dir="${build.dir}/sage/JARs" />
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${dist.dir}/packages/" />

		<echo message="SageTV library location: ${sage.lib.dir}" />

		<!-- Pull these dependencies from the SageHome/JARs folder -->
		<copy todir="lib" file="${sage.lib.dir}/JARs/Sage.jar" failonerror="false" />
		<copy todir="lib" file="${sage.lib.dir}/JARs/phoenix.jar" failonerror="false" />
		<copy todir="lib" file="${sage.lib.dir}/JARs/sagex.api.jar" failonerror="false" />
		<copy todir="lib" file="${sage.lib.dir}/JARs/nielm_sageimdb.jar" failonerror="false" />
		<copy todir="lib" file="${sage.lib.dir}/JARs/nielm_sageutls.jar" failonerror="false" />

		<!-- This will simply update the phoenix and sagex.api from dev environment, if you have one -->
		<copy todir="lib" file="../Phoenix/target/phoenix.jar" failonerror="false" />
		<copy todir="lib" file="../SageAPI/target/sagex.api.jar" failonerror="false" />
	</target>

	<target name="package" depends="init,package-tool" description="Creates the main bmt distribution zip file"/>

	<target name="package-gwt">
		<delete dir="${build.dir}/classes/gwt" />
		<mkdir dir="${build.dir}/classes/gwt" />
		<mkdir dir="${build.dir}/classes/gwt/src" />

		<copy toDir="${build.dir}/classes/gwt/src" failonerror="true">
			<fileset dir="src" includes="org/jdna/metadataupdater/Version.java">
				<exclude name="**/impl/**" />
			</fileset>
		</copy>

		<copy file="resources/gwt/bmt.gwt.xml" todir="${build.dir}/classes/gwt/" />
		
		<!-- update local bin with the gwt so the bmtweb testing env works -->
		<copy todir="bin/gwt">
			<fileset dir="${build.dir}/classes/gwt">
			</fileset>
		</copy>
	</target>

	<target name="package-tool" depends="copyJars,package-gwt,jar,makeLaunch">
		<mkdir dir="${build.dir}/sage" />
		<mkdir dir="${build.dir}/sage/JARs" />
		<mkdir dir="${build.dir}/sage/STVs/SageTV3/" />

		<copy toDir="${build.dir}/sage">
			<fileset dir="resources/props" />
		</copy>

		<copy toDir="${build.dir}/sage">
			<fileset dir="resources/docs">
			</fileset>
		</copy>

		<zip destfile="${dist.dir}/${name}-${version}.zip" basedir="${build.dir}/sage" />
	</target>

	<target name="copyJars">
		<copydir dest="${build.dir}/sage/JARs" src="${libs}" excludes="Sage*.jar,sage-plugin.jar,nielm*.jar,junit*.jar,easymock*.jar" />
	</target>

	<target name="buildVersion">
		<echo file="src/org/jdna/metadataupdater/Version.java">
			package org.jdna.metadataupdater;

			public class Version {
			    public static final String VERSION = "${version}";
			}
		</echo>
	</target>

	<target name="compile" depends="buildVersion">
		<mkdir dir="${build.dir}/classes" />
		<copy includeemptydirs="false" todir="${build.dir}/classes">
			<fileset dir="src" excludes="**/*.launch, **/*.java" />
		</copy>
		<javac debug="true" source="1.5" target="1.5" classpathref="project.class.path" srcdir="${src.dir}" destdir="${build.dir}/classes">
		</javac>
	</target>

	<target name="jar" depends="compile">
		<jar destfile="${build.dir}/sage/JARs/${name}.jar">
			<fileset dir="${build.dir}/classes" />
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Specification-Title" value="Metadata Tools for SageTV" />
				<attribute name="Specification-Version" value="${version}  ${TODAY}" />
				<attribute name="Specification-Vendor" value="Sean Stuckless" />
				<attribute name="Implementation-Title" value="Metadata Tools for SageTV" />
				<attribute name="Implementation-Version" value="${version}" />
				<attribute name="Implementation-Vendor" value="Sean Stuckless" />
			</manifest>
		</jar>
	</target>

	<target name="makeLaunch">
		<!-- build the classpath for the entries that we want -->
		<path id="project.classpath">
			<fileset dir="${build.dir}/sage/JARs" includes="*.jar">
			</fileset>
		</path>

		<!-- Convert project class path to string property -->
		<pathconvert property="mf.classpath" pathsep=" ">
			<path refid="project.classpath" />
			<chainedmapper>
				<flattenmapper />
				<regexpmapper from="(.*)" to="JARs/\1" />
			</chainedmapper>
		</pathconvert>

		<jar destfile="${build.dir}/sage/${launcher}.jar" whenempty="create">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Specification-Title" value="Command Line Metadata Tools for SageTV" />
				<attribute name="Specification-Version" value="${version}" />
				<attribute name="Specification-Vendor" value="jdna.org" />
				<attribute name="Implementation-Title" value="Command Line Metadata Tools for SageTV" />
				<attribute name="Implementation-Version" value="${version}" />
				<attribute name="Implementation-Vendor" value="jdna.org" />
				<attribute name="Main-Class" value="${mainClass}" />
				<attribute name="Class-Path" value="${mf.classpath}" />
			</manifest>
		</jar>
	</target>

	<target name="clean">
		<delete dir="${target.dir}" failonerror="true" />
	</target>

	<target name="package-plugin" depends="package" description="Builds the Sage7 Plugin (will call 'package' as well)">
		<mkdir dir="${dist.dir}/packages/" />

		<zip destfile="${dist.dir}/packages/bmt-jar-${version}.zip">
			<zipfileset file="${build.dir}/sage/JARs/metadata-updater.jar" prefix="" />
		</zip>
		<zip destfile="${dist.dir}/packages/bmt-system-${version}.zip">
			<zipfileset file="${build.dir}/sage/MetadataTool.jar" prefix="" />
		</zip>
	</target>

	<!-- Create the plugin's package for SageTV 7.0 and later -->
	<target name="dist-plugin" depends="package-plugin" description="Build SageTV Plugins (calls package)">
		<copy tofile="${dist.dir}/packages/bmt-${version}.xml" file="resources/plugin/plugin.xml" failonerror="true" />

		<checksum file="${dist.dir}/packages/bmt-jar-${version}.zip" property="md5.jar" />
		<checksum file="${dist.dir}/packages/bmt-system-${version}.zip" property="md5.system" />

		<tstamp>
			<format property="last-modified" pattern="yyyy.MM.dd" />
		</tstamp>

		<replace file="${dist.dir}/packages/bmt-${version}.xml" summary="yes">
			<replacefilter token="@@last-modified@@" value="${last-modified}" />
			<replacefilter token="@@version@@" value="${version}" />
			<replacefilter token="@@jar-checksum@@" value="${md5.jar}" />
			<replacefilter token="@@system-checksum@@" value="${md5.system}" />
		</replace>

		<!-- copy to the s7 local dir for testing -->
		<copy todir="${sage.home}/DeveloperPlugins/" failonerror="false">
			<fileset dir="${dist.dir}/packages/"/>
		</copy>
	</target>

	<!-- upload to sagetv plugin area -->
	<!--
	<target name="publish-plugin">
		<mkdir dir="${user.home}/.ant/lib" />
		<get src="http://repo1.maven.org/maven2/commons-net/commons-net/1.4.1/commons-net-1.4.1.jar" dest="${user.home}/.ant/lib/commons-net-1.4.1.jar" usetimestamp="true" />

		<ftp remotedir="plugins/stuckless/bmt" password="${sage.uploadpass}" server="download2.sagetv.com" userid="${sage.uploaduser}" action="mkdir" />
		<ftp remotedir="plugins/stuckless/bmt" password="${sage.uploadpass}" server="download2.sagetv.com" userid="${sage.uploaduser}" binary="true" action="send">
			<fileset dir="${dist.dir}/packages/" />
		</ftp>
	</target>
	-->
	
	<target name="publish-googlecode" description="Upload build to Google Code">
		<get dest="${user.home}/.ant/lib/ant-googlecode.jar" src="http://ant-googlecode.googlecode.com/files/ant-googlecode-0.0.2.jar" usetimestamp="true"/>
		<!-- <available file="${gc.upload.settings}" property="gc.upload.enable" /> -->
		<!-- <fail message="${gc.upload.settings} file does not exist!" unless="gc.upload.enable" /> -->
		<!-- <property file="${gc.upload.settings}" /> -->
		<fail message="gc.username must be defined in ${gc.upload.settings}" unless="gc.username" />
		<fail message="gc.password must be defined in ${gc.upload.settings}" unless="gc.password" />
		<taskdef classname="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="gcupload">
			<classpath>
			      <fileset dir="${user.home}/.ant/lib/">
			        <include name="**/*.jar"/>
			      </fileset>
			</classpath>
		</taskdef>
		<gcupload targetfilename="bmt-jar-${version}.zip"  filename="${target.dir}/dist/packages/bmt-jar-${version}.zip" username="${gc.username}" password="${gc.password}" projectname="customsagetv" summary="Metadata Tools JAR ${version} (Sage7 Plugin)" labels="QA-Snapshot,Type-Archive,OpSys-All" />
		<gcupload targetfilename="bmt-system-${version}.zip"  filename="${target.dir}/dist/packages/bmt-system-${version}.zip" username="${gc.username}" password="${gc.password}" projectname="customsagetv" summary="Metadata Tools SYSTEM ${version} (Sage7 Plugin)" labels="QA-Snapshot,Type-Archive,OpSys-All" />
	</target>

	<target name="notify-sagetv-bmt" description="Notifies SageTV about the new Plugin">
		<get dest="target/slugger.zip" src="http://sagetv-addons.googlecode.com/files/slugger-dev-tools-0.0.1.zip"/>
		<unzip dest="${user.home}/.ant/lib/" src="target/slugger.zip"/>
        <taskdef classname="com.google.code.sagetvaddons.dev.ant.task.SageTvPluginSubmitter" name="sagesubmit">
			<classpath>
			      <fileset dir="${user.home}/.ant/lib/">
			        <include name="**/*.jar"/>
			      </fileset>
			</classpath>
        </taskdef>
        <sagesubmit name="Sean Stuckless" user="${sage.forumuser}" email="sean.stuckless@gmail.com" pluginid="bmt" reqtype="UPGRADE" descriptor="${dist.dir}/packages/bmt-${version}.xml" />
	</target>

</project>
