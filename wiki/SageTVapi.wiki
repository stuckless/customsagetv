#summary New API for SageTV include RPC features
#labels Featured

= Background =

SageTV documents their [http://download.sage.tv/api/ API] but unfortunately, they don't provide an API that matches their documentation.  Instead, in order to use their API, you need to call the sage service and pass in the named SageTV Api method.  This unfortunately leads to typos, and if you are using a modern IDE, then there is no auto completion.

[http://forums.sagetv.com/forums/member.php?u=5484 Greg], a very competent SageTV developer, solved this API problem by creating a new [http://forums.sagetv.com/forums/downloads.php?do=file&id=128 API] that mirrored SageTV's intention.  


= Why create another API? =

It begs the question as to why I'd create another API, if there are already available.  I guess the question could be answered by asking another question; Why create a second API where there was already one available?

The answer is simple.  I needed it to do more, and something different, than the existing apis. 

I wanted to be able to access the SageTV api remotely.  I tried to find the generator that Greg used to see if maybe I could modify it, but unfortunately the source wasn't released (or I couldn't find it).

I wanted the API to reflect what SageTV had documented.  In other words, I wasn't looking to create wrapper objects, etc, I just wanted to be able to use the API as SageTV had documented it.

This new api achieves all of this.


= What makes it really different? =
I took a 3 tier approach to this API.  Despite the 3 teirs, there isn't that much to it.  The first tier consists of a set of Static Classes and Methods that is auto generated from the SageTV javadoc.  This in itself is exactly what Greg had done.

The generated Methods simply call a static method
{{{
   sagex.SageAPI.call(String name, Object[] args);
}}}

So instead of calling SageTV directly, I call another layer.

The SageAPI layer accepts an ISageAPIProvider instance that is responsible for doing the real work.  SageAPI has a setProvider() method where you can explicitly set the provider to use for the global instance, or if none is set, then it will attempt to find the best known provider.

== ISageAPIProvider Implementations ==

=== EmbeddedSageAPIProvider ===
This provider is the provider that is used when the API is embedded into a running SageTV process.  This api is simply a pass through to the actual SageTV api as is.  There is no marshalling and unmarshalling of data, so it's very efficient at handling SageTV requests without creating a lot of extra objects.

=== RemoteSageAPIProvider ===
This provider is the provider that is used when you are running code outside the SageTV server process.  This provider requires that you install the RPC server in the SageTV server process so that it can communicate.  In this mode, extra objects are created on both the client and server.  So it's not extremely efficient, but it works quite well.

==== Installation ====
To install this Provider....
  * Stop Sage Server
  * Copy the sagex-api.6.3.10.jar to the SAGE_HOME/JARs dir
  * Add/edit the following to the Sage.properties
{{{
load_at_startup_runnable_classes=sagex.remote.SageRPCServerRunner
}}}


  NOTE: if you have more than 1 class you need to separate them with a semi-colon ;

  * Start Sage Server

Your remote client code will also require that the sagex-api.6.3.10.jar is in it's classpath.

In your client code, you simply need to invoke the SageTV api and it should find the remote server automatically. 
{{{
		// Simply media file test....
		Object files[] = MediaFileAPI.GetMediaFiles();
		if (files!=null) {
			System.out.println("Got Files: " + files.length);
			Object mf = files[0];
			System.out.println("Title: " + MediaFileAPI.GetMediaTitle(mf));
			System.out.println("Runtime: " + MediaFileAPI.GetFileDuration(mf));
			System.out.println("ID: " + MediaFileAPI.GetMediaFileID(mf));
		}
}}}


=== StubSageAPIProvider ===
This is simply a testing stub.  It does nothing.  It can't be used for anything, but it does allow for some offline testing.

= Future =
The goal is to export the API as a set of xml and JSON services in addition to the Java RPC api.  This would allow for simpler integration into a web application.

Autogenerating a set of typesafe xml/json wrapper would be fairly trivial.

Maybe this will be merged with Greg's API??  I do like the rcp ability and the thin wrapper approach, but I also agree with a comment that Greg stated... Maybe 1 extra api is enough ;)

= Limitations =
  * Currently does not support calls that require a SageTV Context.  ie, UI related calls.  This will be implemented, just not needed right now.
  * No authorization for RPC calls.  A model needs to be implemented to provide transparent authorization when using RPC. 

= Technical Details =
The RPC server is a micro http server and udp server.  The client, if it's not specifically configured with a RemoteSageAPIProvider will querry the server for it's address using udp.  It sends a message on the group 227.5.6.7 on the port 9998.  The RPC server sends back it's host and port to the client.

== Building The Source ==
The project is an exclipe project.  All jars are provided, except for the Sage.jar.  You will need to copy that from your sage install and add it to the classpath for the project.

=== Regenerating the API ===
The code to regerate the API is in the org.jdna.sage.api.generator Package.  You can rebuild the source using the ant build file and the following command.
{{{
ant -f extra.xml generateSageAPI
}}}

=== Repackaging ===
The default target in the extra.xml build file will repackage the library.
{{{
ant -f extra.xml
}}}

= Contributions =
If you want to work on the project, or feel that something is missing.  Send me a message.