#summary Batch Metadata Import Tool for SageTV
#labels Phase-Design,Featured,Phase-Requirements

= Introduction =

This is a commandline tool to create SageTV metadata properties from external providers.

This tool will scan a given file/directory and create/update the required SageTV properties/jpg so that SageTV can refresh its metadata with what is in the updated properties.

For details about each provider, check out the links below
 * [IMDBProvider IMDB Provider]
 * [DVDProfilerProvider DVD Profiler Provider]

 NOTE: This tool by default will scan and process multi cd movies, and it will only fetch the metadata once, but it will write it out for each cd, since that is how SageTV requires it. This is also known as cd stacking or grouping.

 NOTE: Once you run the tool on your movies, you'll need to tell SageTV to refresh it's metadata by going into the Options menu, in the Videos View, and tell Sage to refresh/rescan media.

= Installation =
Download the zip and extract into a new directory.

== Requirements == 
Java 5 or later

== Usage ==
{{{
 # java -jar MetadataTool.jar
Batch MetaData Tools (1.8)
Import/Update Movie MetaData from a MetaData Provider.

Usage:java MetadataTool OPTIONS ...

OPTIONS: (* are required)
  --recurse              Recursively process sub directories. (default false)
  --auto                 Automatically update meta data if there are exact matches, 1 match, or popular matches.  Otherwise will skip/prompt. (default true)
  --force                Force download of metadata, even if metadata exists and has not been updated. Does not overwrite thumbnails. (default false)
  --forceThumbnail       Force download/overwrite of thumbnails. (default false)
  --reindex              Tells Metadata providers that require indexing (ie, DVD Profiler) to rebuild it's index. (default false)
  --displaySize          # of search results to display on the screen. (default 10)
  --stack                Stack/Group multi cd movies. (default true)
  --listMovies           Just list the movies it would find. (default false)
  --listProviders        Just list the installed metadata providers. (default false)
  --update               Update Missing AND Updated Metadata. (default false)
  --agressive            If the first search doesn't return clean results, then try additional searches. (default true)
  --offline              if true, then the passed file(s) will be treated as offline files. (default false)
  --provider             Set the metadata provider. (default imdb)
  --metadata             Show metadata for movie. (default false)
  --showProperties       Show the current configuration. (default false)
  --setProperty          Sets a Property (--setProperty=name:value) (use --showProperties to get property list)
  --refreshSageTV        Notify SageTV to refresh it's Media Library. (default false)
}}}

== Usage Overview ==
Before you get started, you may have to execute the command once without any arguments to see the help screen.

Once that works, try
{{{
# java -jar MetadataTool.jar --listProviders
}}}

This should list the installed metadata providers. You should see at least 1 provider.  You may see more depending of the version of the tool, or if you've downloaded other provider plugins.  See [CreatingProviderPlugins Creating Provider Plugins] for information on how to create and register your own plugin.

Next, try to scan your Movie directory without changing anything....
{{{
# java -jar MetadataTool.jar --listMovies YOUR_MOVIE_DIR
}}}

This should provide you with a list of Movies that it found. If you are expecting to see multiple entries for each movie because you have multi cd movies, then you may be surprised to see (hopefully) that you only see one movie entry per multi cd movie. You can change this by using the *--stack* option.

{{{
# java -jar MetadataTool.jar --stack=false --listMovies YOUR_MOVIE_DIR
}}}

This will show the same list as before, but it will not attempt to stack/group multi cd movies.

Now you are ready to do some real work. For testing, perhaps copy a handfull of movies to working directory and start there, until you feel comfortable with the tool.
To create the Sage Metadata and Thumbnails using the default options...
{{{
# java -jar MetadataTool.jar YOUR_MOVIE_DIR
}}}

This should create the necessary properties and download the thumbnails, if there were any.

Take a look at the properties and see if you are comfortable with that it produced.

The default options will automatically select what it feels is the best choice and use it. It will only prompt you if it cannot find a suitable entry automatically. When you are prompted, you have several options, quite, next (skip), enter a number of the entry to use, or enter another search string.

Once all movies are scanned, it will display a summary at the end.

If you need/want to process subdirectories, then pass the *--recurse* switch so that the processor will follow subdirectories.

If you find that the tool made an incorrect selection, you can either call the tool on the file directory, passing the *--auto=false* flag with the *--force* flag and it will re do the search only for that file. Keep in mind that if you pass a single file, stacking does not work.

{{{
# java -jar MetadataTool.jar --auto=false --force YOUR_MOVIE_FILE
}}}

Another way to update a video metadata is to edit the .property or create a new one, and set the *_providerId=imdb* and the *_providerDataUrl=IMDB_URL*, and then run the command using *--update*
eg, (edit properties)
{{{
_providerDataUrl=http\://www.imdb.com/title/tt0416236/
_providerId=imdb
}}}

then run
{{{
# java -jar MetadataTool.jar --update YOUR_MOVIE_FILE_OR_DIR
}}}

As of version 1.8, there is a new option --refreshSageTV.  You can use this option to tell SageTV to refresh its imported media.  You can do this as  separate command, or just add it to the command line parameters of a full scan.  Once the scan is done, it will use the [http://code.google.com/p/customsagetv/wiki/SageTVapi SageTV Remote APIs] to notify SageTV to refresh its imported media.

In order to use --refreshSageTV, you must have the [http://code.google.com/p/customsagetv/wiki/SageTVapi Remote APIs] installed on the SageTV server.

= Advanced Topics =

== Architecture Overview ==
The basic architecture is that the inputs and outputs are all pluggable. In other words, other providers can be written and plugged in, so that if you wrote a metadata service that worked with another site (ie DVD Profiler), you can plug it in. To do this, see the default properties at the end. To create a new Metadata provider, implement the IVideoMetaDataProvider interface and the IVideoMetaData interface.

The same is true for metadata persistence. The default and only one provided is for Sage metadata properties. But you can write your own if you implement the IVideoMetaDataPersistence interface.

The other note about plugability is the fact that even the "Screen" is pluggable. I implemented a ConsoleScreen, so that that the tool could be interfaced to the command line, but somone could create a Sage UI Screen implementation that enabled the engine to work directly from within Sage (hint hint). The same is true if someone wanted to write a Web Screen so that it could be web enabled. To create a new Screeen, implement the IMetaDataUpdaterScreen interface.

See [FrameworkOverview Framework Overview] for more information on the Metadata Tools framework.

== Properties ==

NOTE: As of 1.8 the properties format and keys have changed.  You will need to verify your properties before you rerun the tool.

As of 1.8, the properties filename changed from metadataupdater.properties to just metadata.properties.  This was done, to force users that had customized the metadata tool, to update to the new format.

You can get a list of supported properties, by running the command
{{{
# java -jar MetadataTool --showProperties
}}}

It should produce the following results.  Keep in mind, that if  you have a custom metadata.properties, then it's values will be reflected in the output.  You can use --showProperties to verify that your properties are being taken into account

{{{

Batch MetaData Tools (1.8)
#       Begin: urlconfiguration
# Description: Configures Properties regarding how URLs are handled.

# Description: Cache Directory where cached URLs are stored
#        Type: java.lang.String
/urlconfiguration/cacheDir=cache/url/

# Description: How long, in seconds, URLs remain in the cache
#        Type: int
/urlconfiguration/cacheExpiryInSeconds=86400

# Description: URL Factory class name for creating new Url objects
#        Type: java.lang.String
/urlconfiguration/urlFactoryClass=org.jdna.url.CachedUrlFactory

# Description: HTTP User Agent that is sent with each hew http request
#        Type: java.lang.String
/urlconfiguration/httpUserAgent=Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.1) Gecko/2008072820 Firefox/3.0.1
# End: urlconfiguration


#       Begin: metadataUpdater
# Description: Configuration for Main Metadata Updater

# Description: Screen class name that is used for drawing and responding to events
#        Type: java.lang.String
/metadataUpdater/screenClass=org.jdna.metadataupdater.ConsoleScreen

# Description: Set to true, if you want to overwrite existing thumbnails
#        Type: boolean
/metadataUpdater/overwriteThumbnails=false
# End: metadataUpdater


#       Begin: media
# Description: Configuration for Media items

# Description: Stacking Model regex (taken from xbmc group)
#        Type: java.lang.String
/media/stackingModelRegex=[ _\\.-]+(cd|dvd|part)[ _\\.-]*([0-9a-d]+)

# Description: If true, then the thumbnail will be written to the VIDEO_TS folder.  Otherwise, it gets written to the normal DVD location
#        Type: boolean
/media/useTSFolderForThumbnail=false

# Description: Regular expression for the file extensions that are recognized
#        Type: java.lang.String
/media/videoExtensionsRegex=avi|mpg|divx|mkv|wmv|mov|xvid

# Description: Regular expression for the directory names to ignore
#        Type: java.lang.String
/media/excludeVideoDirsRegex=
# End: media


#       Begin: metadata
# Description: Configuration for Metadata

# Description: Default class name for storing metadata
#        Type: java.lang.String
/metadata/persistenceClass=org.jdna.media.metadata.impl.sage.SageVideoMetaDataPersistence

# Description: Comma separated list of known metadata providers (ie, can be used for searching for metadata)
#        Type: java.lang.String
/metadata/videoMetadataProviders=org.jdna.media.metadata.impl.imdb.IMDBMetaDataProvider,org.jdna.media.metadata.impl.nielm.NielmIMDBMetaDataProvider,org.jdna.media.metadata.impl.dvdprof.DVDProfMetaDataProvider,org.jdna.media.metadata.impl.dvdproflocal.LocalDVDProfMetaDataProvider

# Description: Comma separated list of words that will be removed from a title when doing a search
#        Type: java.lang.String
/metadata/wordsToClean=dvd,dvdrip,cam,ts,tc,scr,screener,dvdscr,xvid,divx,avi,vrs,repack,mallat,proper,dmt,dmd,stv
# End: metadata


#       Begin: dvdprofiler
# Description: Configuration for the DVD Profiler Provider that uses urls as it's datasource

# Description: Comma separated list of DVD Profiler Profile urls to use when searching for movies
#        Type: java.lang.String
/dvdprofiler/profileUrls=

# Description: Set this to true to rebuild the indexed urls
#        Type: boolean
/dvdprofiler/forceRebuild=false

# Description: Directory where the indexed DVD Profiler data will be stored
#        Type: java.lang.String
/dvdprofiler/indexDir=cache/index
# End: dvdprofiler


#       Begin: dvdprofilerLocal
# Description: Configuration for the Local DVD Profiler provider (ie, uses local DVD Profiler, not Urls)

# Description: Set this to true to force the local dvd profiler index to be rebuilt
#        Type: boolean
/dvdprofilerLocal/forceRebuild=false

# Description: Directory where the local dvd profiler data will be indexed
#        Type: java.lang.String
/dvdprofilerLocal/indexDir=cache/indexDVDProfLocal/

# Description: Local DVD Profiler image directory
#        Type: java.lang.String
/dvdprofilerLocal/imageDir=

# Description: Local DVD Profiler xml file
#        Type: java.lang.String
/dvdprofilerLocal/xmlFile=
# End: dvdprofilerLocal


#       Begin: sageMetadata
# Description: Configuration for the SageTV Metadata Persistence

# Description: How each Actor will be written.  This mask will be applied to each actor, and then appeneded into a single line for the properties file. {0} - Actor Name, {1} - Actor Role
#        Type: java.lang.String
/sageMetadata/actorMask={0} -- {1};\n

# Description: Description Mask (note ${PROP_FIELD_NAME} field names are looked up in the property file)
#        Type: java.lang.String
/sageMetadata/descriptionMask=${Description}\nUser Rating: ${_userRating}\n

# Description: Title to use for multi volume vidoes (_disc is disc # 1,2,3,etc)
#        Type: java.lang.String
/sageMetadata/multiCDTitleMask=${Title} Disc ${_disc}

# Description: Title to use for single volume vidoes
#        Type: java.lang.String
/sageMetadata/titleMask=${Title}

# Description: Number genre levels to write.  -1 means all levels.
#        Type: int
/sageMetadata/genreLevels=1
# End: sageMetadata

}}}

If you need to change the value of a property for a single use, then you can use the --setProperty option.

{{{
# java -jar MetadataTool.jar --setProperty=/sageMetadata/genreLevels:2 --showProperties
}}}

If you run the output of the above command, you should see that the value of /sageMetadata/genreLevels is now set to 2.  This is not a permanent change, but only for the current session.  If you want to make a property permanant, put it in the metadata.properties.