#summary Batch Metadata Import Tool for SageTV

= Introduction =

This is a commandline tool to create SageTV metadata properties from external providers.

This tool will scan a given file/directory and create/update the required SageTV properties/jpg so that SageTV can refresh its metadata with what is in the updated properties.

For details about each provider, check out the links below
* [IMDBProvider IMDB Provider]
* [DVDProfilerProvider DVD Profiler Provider]

 NOTE: This tool by default will scan and process multi cd movies, and it will only fetch the metadata once, but it will write it out for each cd, since that is how SageTV requires it. This is also known as cd stacking or grouping.

 NOTE: Once you run the tool on your movies, you'll need to tell SageTV to refresh it's metadata by going into the Options menu, in the Videos View, and tell Sage to refresh/rescan media.

= Installation =
Download the zip and extract into a new directory.

== Requirements == 
Java 5 or later

== Usage ==
{{{
 # java -jar MetadataTool.jar
 Usage:org.jdna.metadataupdater.MetadataUpdater OPTIONS ...

 OPTIONS: (* are required)
 OPTIONS: (* are required)
  --recurse              Recursively process sub directories. (default false)
  --auto                 Automatically update meta data if there are exact matches, 1  match, or popular matches.  Otherwise will skip/prompt. (default true)
  --force                Force download of metadata, even if metadata exists and has not been updated. Does not overwrite thumbnails. (default false)
  --forceThumbnail       Force download/overwrite of thumbnails. (default false)
  --reindex              Tells Metadata providers that require indexing (ie, DVD Profiler) to rebuild it's index. (default false)
  --displaySize          # of search results to display on the screen. (default 10)
  --stack                Stack/Group multi cd movies. (default true)
  --listMovies           Just list the movies it would find. (default false)
  --listProviders        Just list the installed metadata providers. (default false)
  --update               Update Missing AND Updated Metadata. (default false)
  --agressive            If the first search doesn't return clean results, then try additional searches. (default true)
  --offline              if true, then the passed file(s) will be treated as offline files. (default false)
  --provider             Set the metadata provider. (default imdb)
}}}

== Usage Overview ==
Before you get started, you may have to execute the command once without any arguments to see the help screen.

Once that works, try
{{{
# java -jar MetadataTool.jar --listProviders
}}}

This should list the installed metadata providers. You should see at least 1 provider.  You may see more depending of the version of the tool, or if you've downloaded other provider plugins.  See [CreatingProviderPlugins Creating Provider Plugins] for information on how to create and register your own plugin.

Next, try to scan your Movie directory without changing anything....
{{{
# java -jar MetadataTool.jar --listMovies YOUR_MOVIE_DIR
}}}

This should provide you with a list of Movies that it found. If you are expecting to see multiple entries for each movie because you have multi cd movies, then you may be surprised to see (hopefully) that you only see one movie entry per multi cd movie. You can change this by using the *--stack* option.

{{{
# java -jar MetadataTool.jar --stack=false --listMovies YOUR_MOVIE_DIR
}}}

This will show the same list as before, but it will not attempt to stack/group multi cd movies.

Now you are ready to do some real work. For testing, perhaps copy a handfull of movies to working directory and start there, until you feel comfortable with the tool.
To create the Sage Metadata and Thumbnails using the default options...
{{{
# java -jar MetadataTool.jar YOUR_MOVIE_DIR
}}}

This should create the necessary properties and download the thumbnails, if there were any.

Take a look at the properties and see if you are comfortable with that it produced.

The default options will automatically select what it feels is the best choice and use it. It will only prompt you if it cannot find a suitable entry automatically. When you are prompted, you have several options, quite, next (skip), enter a number of the entry to use, or enter another search string.

Once all movies are scanned, it will display a summary at the end.

If you need/want to process subdirectories, then pass the *--recurse* switch so that the processor will follow subdirectories.

If you find that the tool made an incorrect selection, you can either call the tool on the file directory, passing the *--auto=false* flag with the *--force* flag and it will re do the search only for that file. Keep in mind that if you pass a single file, stacking does not work.

{{{
# java -jar MetadataTool.jar --auto=false --force YOUR_MOVIE_FILE
}}}

Another way to update a video metadata is to edit the .property or create a new one, and set the *_providerId=imdb* and the *_providerDataUrl=IMDB_URL*, and then run the command using *--update*
eg, (edit properties)
{{{
_providerDataUrl=http\://www.imdb.com/title/tt0416236/
_providerId=imdb
}}}

then run
{{{
# java -jar MetadataTool.jar --update YOUR_MOVIE_FILE_OR_DIR
}}}

= Advanced Topics =
== Why 2 IMDB Providers ==
You may have noticed that there are 2 imdb metadata providers. There is mine, and there is one built on Nielm's. I originally started out using Nielm's, but I ended up writing my own because I needed to know more information about the search results, such as if the result was an exact match, partial match, popular match, etc. Knowing this was critical to implementing the *--auto* functionality. Keep in mind that if you switch to use Nielm's implementation, then it should still work, but you will be prompted for each Movie, since there is no way to tell what type of search result it is returning. Also note that my provider ONLY parses the IMDB Title page and as such, my information is not as detailed as Nielm's. I may in time, either create a Composite provider combining both providers, but for now, you have to use one or the other and suffer the consequences of each

== Architecture Overview ==
The basic architecture is that the inputs and outputs are all pluggable. In other words, other providers can be written and plugged in, so that if you wrote a metadata service that worked with another site (ie DVD Profiler), you can plug it in. To do this, see the default properties at the end. To create a new Metadata provider, implement the IVideoMetaDataProvider interface and the IVideoMetaData interface.

The same is true for metadata persistence. The default and only one provided is for Sage metadata properties. But you can write your own if you implement the IVideoMetaDataPersistence interface.

The other note about plugability is the fact that even the "Screen" is pluggable. I implemented a ConsoleScreen, so that that the tool could be interfaced to the command line, but somone could create a Sage UI Screen implementation that enabled the engine to work directly from within Sage (hint hint). The same is true if someone wanted to write a Web Screen so that it could be web enabled. To create a new Screeen, implement the IMetaDataUpdaterScreen interface.

See [FrameworkOverview Framework Overview] for more information on the Metadata Tools framework.

== Properties ==
The tool comes with a base set of properties. You can override these properties by putting another property file, called metadataupdater.properties, in your current working directory.

{{{
# NOTE when you enter a regex in a prop file you need to escape it even more
# ie, \s+ should become \\s+

# tokens of words that we want to remove from the filename
# These are stop tokens, in that once a token is reached, then any token after that point is discarded.
# This is used to clean up titles before seaching.  Never use words like the,in, etc
org.jdna.media.metadata.VideoMetaDataUtils.cleanSearchCriteria.wordTokens=dvd,dvdrip,cam,ts,tc,scr,screener,dvdscr,xvid,divx,avi,vrs,repack,mallat,proper,dmt,dmd,stv

# Regular Expression for deciding how to stack/group cds
org.jdna.media.impl.CDStackingModel.StackingRegex=[ _\\.-]+(cd|dvd|part)[ _\\.-]*([0-9a-d]+)

# Regular Expression for determining a Video File

org.jdna.media.impl.MovieResourceFilter.VideoExtensionRegex=avi|mpg|divx|mkv|wmv|mov|xvid

# Regular Expression for directories to skip...
org.jdna.media.impl.MovieResourceFilter.ExcludeDirRegex=Looney\\s+Tunes

# Sage Properties
# Mask Applied to the description when writing the description setting in sage.
# Combination of Any Sage Property from the Property File that you want to use as the display Description.  For example, if you wanted the user rating
# to be displayed in the description, then use
# ${Description}\n${_UserRating}
org.jdna.media.metadata.impl.sage.SageVideoMetaData.descriptionMask=${Description}\nUser Rating: ${_userRating}\n

# Title Mask
# Can be used to insert the Year into the title, 
# eg, ${Title} (${Year})
org.jdna.media.metadata.impl.sage.SageVideoMetaData.titleMask=${Title}

# Title Mask (Multi CD)#
# For Multi Disc Movies, this will put the Disc # in the Movie Title (So that Sage will Show it)
org.jdna.media.metadata.impl.sage.SageVideoMetaData.titleMaskMultiCd=${Title} Disc ${_disc}

# How each Actor will be written.  This mask will be applied to each actor, and then appeneded into a single line for the properties file.
# {0} - Actor Name
# {1} - Actor Role
org.jdna.media.metadata.impl.sage.SageVideoMetaData.actorMask={0} -- {1};\n

# Set to true|false to enable/disable thumbnail downloading
org.jdna.media.metadata.impl.sage.SageVideoMetaData.downloadThumbnail=true

# Set to true|false to enable/disable single or multiple genre entries per line
org.jdna.media.metadata.impl.sage.SageVideoMetaData.singleGenreField=false

# if set to true, then it will write the thumbnail toe TS_VIDEO/folder.jpg, otherwise it will write it as the same name as the dir,
# at the dir level (default)
org.jdna.media.metadata.impl.sage.SageVideoMetaData.thumbnailInTS_VIDEO=false

# Set to true to overwrite existing thumbnails
org.jdna.media.metadata.impl.sage.SageVideoMetaData.overwriteThumbnail=false

# Knownn Metadata Providers
org.jdna.metadataupdater.MetadataUpdater.MetadataProviders=org.jdna.media.metadata.impl.imdb.IMDBMetaDataProvider,org.jdna.media.metadata.impl.nielm.NielmIMDBMetaDataProvider,org.jdna.media.metadata.impl.dvdprof.DVDProfMetaDataProvider

# Persistence Engine for reading/writing metadata
org.jdna.metadataupdater.MetadataUpdater.PersistenceClass=org.jdna.media.metadata.impl.sage.SageVideoMetaDataPersistence

# Screen to use for UI interaction
org.jdna.metadataupdater.MetadataUpdater.ScreenClass=org.jdna.metadataupdater.ConsoleScreen

# Enable Url Caching
org.jdna.url.UrlFactory.factoryClass=org.jdna.url.CachedUrlFactory

# DVD Profiler Information
# Comma Separated List of profile urls to index
org.jdna.media.metadata.impl.dvdprof.DVDProfMetaDataProvider.profileUrls=http://www.intervocative.com/dvdcollection.aspx/Rephaim

# Set to true when you want to force an index rebuild
org.jdna.media.metadata.impl.dvdprof.DVDProfMetaDataProvider.forceRebuild=false
}}}