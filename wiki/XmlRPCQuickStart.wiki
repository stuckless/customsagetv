#summary Rest Services for SageTV
#labels Featured

Before you begin, ensure that you have installed the latest sages-api jar on the SageTV server.

If you have configured the server correctly, then you can test if you have basic access, by going to the following url

 http://server:8080/sagex/rpcXml/Global/GetOS

If you get back an xml file that contains the OS of the Sage server, then you are up and running.

== Anatomy of a Rest Service Request ==

The Rest Service Request has the following structure...

 http://server:8080/sagex/rpcXml/SageAPI/SageCommand/Arg1/Arg2/.../context:CONTEXT

*SageAPI* is one of the Top Level Sage API classes in the sage.api package from their [http://download.sage.tv/api/index.html?sage/api/Global.html javadoc].  (case matters)

*SageCommand* is one of the Methods associated with the SageAPI (case matters)

*Arg1..Argn* are the parameters (position matters)

*context:_CONTEXT_* is how you can pass a UI context


When executing Rest services, it's a good idea to find your command in the SageTV Javadoc and then convert that Java Command into a Rest Service Request.

So, if you wanted to see the capture devices that are installed on your server, you would issue the following request
 http://server:8080/sagex/rpcXml/CaptureDeviceAPI/GetCaptureDevices

The resulting xml would look something like this
{{{
<response>
  <header>
  </header>
  <body>
    <array size="2">
      <value index="0">adapter0</value>
      <value index="1">video0</value>
    </array>
  </body>
</response>
}}}

== Anatomy of an Rest Service Xml Response ==
The response that comes back from a Rest Request, always has the following structure
 * response
   * header
     * error @code="#"
       * message
       * exception
   * body
     * array @size="#"
       * value @index="#"
     * arrayRef @ref="" @size="#"
     * objectRef @ref=""
     * value

Each response call will contain the *error* and the *body* elements.

The Error Node will ONLY exist if there was an error.  So testing for the existence of this node will allow you to test for an error.  The *message* node will contain the friendly message and the *exception* node will contain the java stack trace from the age api call.

If your call only returns a simple primitive value or string, then the body will contain a single *value* element containing the value.

If your object returns a simple array containing strings or primimitives, then you will get the entire array back as an *array* element containing *value* elements.  The array will tell you it's size and each value element will contain an attribute for it's index position.

If the array comming back is not serializable, then you will be get back an *arrayRef* element that only contains it's reference id and the array size.  This is the case when you call something like /MediaFileAPI/GetMediaFiles/

In the case that you have an arrarRef, you can still get access to the array elements by passing the arrayRef:index as an api argument.  For example, if you asked for all media files and the array ref was 9814147.  You can then call GetMediaTitle using the follow command
 http://server:8080/sagex/rpcXml/MediaFileAPI/GetMediaTitle/9814147:10
Where the *MediaFile* argument is passed as the Array Reference and the Index from that array that you want to access.  So, in the above command, i'm asking for the MediaFileTitle for the *10th* element in the array reference *9814147*.

While the concept of the arrayRef is not ideal, it does serve 2 purposes.  The first is that it prevent an entire large object array from being serialized and sent across the network, which could be time consuming, especially if you only need to access a few elements.  The second, is that the SageAPI is setup this way.  In other words, Sage does not expose their object, but rather they expose services that can act on those objects.  The arrayRef mimics this behaviour.

== Alternate Format for Calling REST Services ==

 http://server:8080/sagex/rpcXml/SageAPI?command=SageCommand&1=Arg1&2=Arg2&context=CONTEXT

Comands is passed using the 'command' paramters, and arguments are passed using sequentially numbers name value pairs.

= Extras =
This package also includes a servlet for requesting thumbnails and mediafiles.  

To Request a Media File
 http://server:8080/sagex/media/medafile/MEDIAFILEID
Where *MEDIAFILEID* is Sage's MediaFileID for the requested video.

To Request a Thumbnail
 http://server:8080/sagex/media/thumbnail/MEDIAFILEID
Where *MEDIAFILEID* is Sage's MediaFileID for the requested video.


= Tips =
Over time, users will contribute Tips for using this Rest Service.  I'll try to keep adding to this list as they come in.


 * Understand the javadoc before you start using the api, since the api is simply an extension of the javadoc.
 * Remember that all API commands are case sensisitive.